Unit Testing
 : javscript는 표현의 거대한 힘과 함께 있는 동적인 언어이다. 그러나 이것은 또한 컴파일러의
 도움없이는 도달할 수 없었다. 여러 이유 때문에 자바스크립트로 쓰여진 코드를 테스트 셋이 강력
 해야 한다고 우리는 매우 강하게 느낀다. 우리는 Angular에 많은 특징을 Angular App.의 쉬운
 테스트를 만들수 있게 설계하였다. Angular와 함께 테스트하지 못할 변명을 없다.
 
관심사의 분리
 : Unit Test는 이름에 내포하듯이 코드의 개별적 단위에 대한 테스트 이다. Unit test들은
 "이 로직은 정확한가"나 "분류 기능순서가 정확한 순서로 나열되었나?"와 같은 질문에 답하기 위해
 노력하였다.
 
 질문에 대한 답변을 위해 우리가 테스트하에 독립적인 단위로 구별할수 있는것은 매우 중요하다.
 우리가 분류 기능을 테스트 할때 우리는 강제적으로 Dom elements나 XHR call에 정렬할 데이터
 를 가져오는 것에 대한 표시를 강제적으로 증가 시키는 것을 원하지 않는다.
 
 이것은 매우 명백하게 기존 프로젝트의 개별 기능과는 다르게 호출 될 수 있다. 그 이유는 개발자가 
 종종 전체에서 코드의 부분에 대한 고려 사항을 섞기 때문이다. 이것은 XHR requst를 만들때
 이것은 response data를 정렬하고 Dom을 조작한다.
 
 Angular와 함께 우리는 당연한 것을 쉽게 만들 수 있다. XHR requests 때문에 우리는 의존석
 주입(DI)를 제공하였고, 그리새 우리는 request를 시뮬레이터 할 수 있다. DOM 때문에 우리는
 이것을 추상화 하고, 그래서 우리는 DOM의 직접적인 조작없이도 Model을 테스트 할 수 있다.
 우리의 test는  그 데이터는 생성하거나 DOM상태를 보거나, XHR requests의
 리턴 데이터를 기다리는 것 없이도 확인 assert 할 수 있다.
 
- Angular appl.테스트를 위한 추가 tools
 : Angular 어플리케이션 테스트를 위하여 설정 및 실행이 매우 쉽게 만들어 사용 가능한 일정한 
 tools 이 여기있다.
 1. Karma:
  Karma는 자바스크립트 실행 라인 tool이고 이것은 너의 테스트를 실행하고 소스코드를 로드할
  웹서버를 생성하는데 사용할 수 있다. 너는 Karma가 브라우서 다수에 실행되도록 설정할 수 있고,
  그것은 유용하게 모든 브라우저를 지원 할 수 있다고 확신 할 수 있다. Karma는 커맨드 라인에서
  실행되고, 브라우저에서 실행하고 그 결과를 보여줍니다.
  
  Karma는 NodeJS application이고npm을 통해서 설치됩니다. 전체 설치에 대한 소개는 Karma
  website에서 이용할 수 있습니다.
  
 2. Jasmine:
  Jasmine은 자바스크립트를 통한 행동주도개발 프레임워크 입니다. 그리고 그것은 더 많은 유명한
  Angular appl.의 테스트를 선택할수 있게 됩니다. Jasmine은 너의 테스트 구성을 돕고, 
  또한 assertions를 표시합니다. 너의 테스트들이 성장하기 위해 잘 구조화 하여 유지하고, 
  문서화를 유지하는데 Jasmine은 큰 도움을 줍니다.
  
  Jasmin에서 우리는 descibe 기능을 함께테스트할 그룹에서 사용합니다.
  "discribe('sorting the list of users', function(){
   // 개별 테스트들이 들어가는 곳
  });"
  그리고 각각의 개별 테스트는 it 기능으로 불리도록 정의 됩니다.
  "discribe('sorting the list of users', function(){
    it('sorts in descending order by default', function(){
      // 테스트 assertion이 들어가는 곳
      });
   }); "
  describe 블럭으로 관련 테스트 들을 그룹화 하고, 개별 테스트를 it으로 불리도록 테스트
  문서화 하면 discribing된다. 
  결국 Jasmine은 너의 assertions를 만드는데 mathers를 제공합니다.
  " describe('sorting the list of users', function(){
    it('sorts in descending order by default', function(){
      var users = ['jack','igor','jeff'];
      var sorted = sortUsers(users);
      expect(sorted).toEqual(['jeff','jack','igor']);
     });
    }); "
  Jasmine은 assertions의 다양하게 만드는데 도움을 주는 matchers의 번호화 함께 제공
  됩니다. 그리고 Jasmine 문서를 읽고, 그들이 하는 것을 보십시요. Karma를 이용한 Jasmine
  이 우리는 karma-jasmin 테스트 실행자로 사용합니다.
  
  3. angular-mocks
   : Angular는 ngMock모듈을 제공합니다. 그리고 그것은 너의 테스트들의 mocking을 제공합니다.
   이것은 단위테스트에서  주입 및 모의 Angular service에 사용합니다. 추가적으로 이것은
   그들이 동시성화 되는 다른 모듈을 확장 할 수 있습니다. 동기화는 테스트를 더 깔끔하고 쉽게
   할 수 있습니다. ngMock의 가장 유용한 부분중 하나인 $httpBackend는 우리가 mock XHR 
   requests를 테스트에 사용하고 샘플 데이터를 대신 받아오는데 사용 된다.
   
- Controller 테스트
 Angular는 뷰로부터 로직이 분리되어 있습니다. 이것은 controller가 테스트하기 쉽게 유지하여
 줍니다. 우리가 contoller를 테스트 하는 것을 보고 따라하세요. 그리고 그것은 패스워드의 길이
 에 기원하는 scope의 설정값을 셋팅합니다.
 
 angular.module('app',[])
 .controller('PasswordController', function PasswordController($scope){
   $scope.password = '';
   $scope.grade = function(){
   		var size = $scope.password.length;
   		if(size > 8){
			$scope.strength = 'strong';
		}else if(size > 3){
			$scope.strength = 'medium';
		}else{
			$scope.strength = 'weak';
		}
	}
 });
 
 controller는 global scope에서는 유용하지 않기 때문에 angular.mock.inject 를 controller에
 처음에 inject하여 사용한다. 첫번째 단계로는 module function에 사용한다. 그리고 그것은
 angular-mock를 제공한다. 모듈에서 이것이 주어져서 로드되면, 이것은 너의 테스트에 유용하게
 사용된다. 우리는 beforeEach를 통과하고, 그것은 functino Jasmine에서 제공되는 기능이다.
 우리가 각테스트 전에 기동되도록 한다. 그러면 우리는 inject를 컨트롤러 인스턴스화를 담당하는 서비스
 $controller에 접근하여 사용할 수 있다.
 
 describe('PasswordController', function(){
 	beforeEach(module('app'));
 	
 	var $controller;
 	
 	beforeEach(inject(function(_$controller_){
 		//인젝터는 매개변수의 이름이 일치할때에 언더스코어(_)에 감싸지 않는다.
 		 $controller = _$controller_;
 }));
 
 describe('$scope.grade', function(){
 	it('sets the strength to "strong" if the password length is >8 chars', function(){
 		var $scope = {};
 		var controller = $controller('PasswordController', { $scope: $scope});
 		$scope.password = 'longerthaneightchars';
 		$scope.grade();
 		expect($scope.strength).toEqual('strong');
 		});
 	});
 });
 
 describe 호출을 중첩하는 방법은 중요하다. 그리고 그것은 문자열을 호출할때 설명되고, 
 그 테스트는 더 깔끔해진다. 이것은 테스트하는 것을 문서화 하기 좋다. 그리고 그것은 당신이
 쉽게 한눈에 발생하는 일등을 볼 수 있다.지금 그 패스워드가 3글자 이하이면 테스트를 하나 
 추가하고, 그것은 $scope.strength를 "weak"로 설정한다.
 
 describe('PasswordController', function(){
 	beforeEach(module('app'));
 	
 	var $controller;
 	baforeEach(inject(function(_$controller_){
 		//변수가 동일하게 맞는 경우로 부터이면 injector는 underscores를 포장하지 않는다.
 		$controller = _$controller_;
 }));  
 		
 describe('$scope.grade', function(){
	  it('sets the strength to "strong" if the password length is >8 chars',
	    var $scope = {};
	    var controller = $controller('PasswordController, {$scope:$scope});
	    $scope.password = 'longerthaneightchars';
	    $scope.grade();
	    expect($scope.strength).toEqual('strong');
	  });
	  
	  it('sets the strength to "weak" if the password length <3 chars', function(){
	  	var $scope = {};
	  	var controller = $controller('PasswordController', {$scope: $scope});
	  	$scope.password = 'a';
	  	$scope.grade();
	  	expect($scope.strength).toEqual('weak');  
 	  });
  	});
  });
  지금 우리는 두개의 테스트를 가지고 있고, 테스트들은 중복된다. 둘다 $scope값을 생성해야만
  하고 controller도 생성해야 한다. 우리는 새로는 테스트를 추가함으로써 이 중복이 오직 나쁜
  쪽으로 가고 있다. 고맙게도 Jasmine은 beforeEach를 제공하고, 그것은 우리가 각 개별 테스트
  전에 실행될수 있다. 우리의 테스트를 보자.
  
  describe('PasswordController', function(){
 	beforeEach(module('app'));
 	
 	var $controller;
 	
 	beforeEach(inject(function(_$controller_){
 		//인젝터는 매개변수의 이름이 일치할때에 언더스코어(_)에 감싸지 않는다.
 		 $controller = _$controller_;
 }));
 
  describe($scope.grade', function(){
  	var $scope.controller;
  	
  	beforeEach(function(){
  		$scope = {};
  		controller = $controller('PasswordController', {$scope: $scope});
  	});
  	it('sets the strength to "strong" if the password length is >8 chars',
  	function(){
  		$scope.password = 'longerthaneightchars';
  		$scope.grade();
  		expect($scope.strength).toEqual('strong');
	});
  	
  	if('sets the strength to "weak" if the passwod length < 3 chars', function()
  		$scope.password = 'a';
  		$scope.grade();
  		expect($scope.strength).toEqual('weak');
  	});
  });
 });
 
 우리는 중복됨을 beforeEach로 줄인다. 개별적인 테스트는 지금 오직 컨테이너에 두고, 
 특별한 조건을 테스트 하고 모든테스트에 접근하는 일반적인 문의 사항이 있습니다.당신의 테스트가
 기대한대로 였다면 beforeEach를 사용 할 수 있는간단한 테스트를 사용 했을때 유지되었다.
 beforeEach는 오직 Jasmine제공의 한 부분입니다.
  
- Test Filter 
 Filters는 사용자의 읽을수 있는 형식 대이타를 변경해주는 기능입니다. 그들은 그들이 형식을
 프로그램의 로직으로 부터 서식 제거에 책임을 지므로 중요합니다. 게다가 프로그램 로직을 단순화
 합니다.
 
 myModule.filter('length', function(){
 	return function(text){
 		return ('' + (text||'')).length;
	}
 });
 
 describe('length filter',function(){
 	var $filter;
 	
 	beforeEach(inject(function(_$filter_){
 		$filter = _$filter_;
 	}));
 
	it('return 0 when given null', function(){
		var length = $filter('length');
		expect(length(null)).toEqual(0);
	});
	
	it('returns the correct value when given a string of chars', function(){
		var length = $filter('length');
		expect(length('abc')).toEqual(3);
	});
 });
 
- Directives 테스트
 AngularJS에서 디렉티브는 개인의 HTML tags, 속성, classes, comment와 함께 복잡한
 기능에서 탈비하기 위한 책임이 있다.
 
 간단한 HTML 속성 Directive
 
 의존하지 않는 Angular를 시작한다.
 
 var app = angular.module('myApp',[]);
 
 지금 우리는 우리의 app에 directive를 추가할 수 있다.
 
 app.directive('aGreatEye', function(){
 	return {
 		restrict: 'E',
 		replace: true,
 		template: '<h1'lidless, weathed in flame, {{1+1}} times</h1>'
 	};
 });

 이 directive는 <a-greate-eye></a-greate-eye>테그를 사용하곤한다. 이것은 또한 
 template의 전체 테그와 교체된다. 지금 우리는 jasmine unit test를 이 기능적으로 검증
 하는데에 사용할 예정이다. 중요한 점은 이 표현식{{1+1}}번만큼 본문 렌더링을 평가할 것인다.
 
 discribe('Unit testing great quotes', function(){
 	var $compile, $rootScope;
 	
 	//Load the myApp module, which contains the directive
 	beforeEach(module('myApp'));
 	
 	// Store references to $rootScope and $compile
 	// so they are available to all tests in this describe block
 	beforeEach(inject(function(_$compile_, _$rootScope_){
 		// The injector unwraps the underscores (_) from around the parameter
 		// names when matching
 		$compile = _$compile_;
 		$rootScope = _$rootScope_;
 	}));
 	
 	it('Replaces the element with the appropriate content', function(){
 		//Compile a piece of HTML containing the directive
 		var element = $compile("<a-greate-eye></a-greate-eye>")($rootScope);
 		//fire all the watches, so the scope expression {{1 + 1}} will be evaluated
 		$rootScope.$digest();
 		//Check that the compiled element contains the templated content
 		expect(element.html()).toContain("Lidless, wreathed in flame, 2 times");
 	});
 });
 
 우리는 $compile 서비스와 $rootScope가 jasmine test전에 ineject 한다. $compile 서비스는 
 aGrestEye directive가 렌더링 되기 전에 사용한다. 디렉티브를 렌더린 한 후에는 우리는 그 디렉티브가
 본문으로 대체 되었다고 생각한다. 그리고 "뚜껑 없는 불꼴의 고리 2가지"가 존재한다.
 
 Underscore notation: 이거은 underscore 표기법(예: _$rootScope_)의 사용은 AngularJS
 	커뮤니티에서 퍼져있는 협약이다. 변수의 값은 유지하면서 테스트를 할수 있다. $injector는 선두의
 	부분과 후행 밑줄 사이에 파라미터가 매칭될때 사용한다.underscore규칙은 오직 이름이
 	시작하고 끝날때에 정확히 1개의 underscore가 있고 반면에 어떤 변경도 발생하지 않는다. 
  
- Transclusion Directive 테스트
 transclusion 을 사용하는 디렉티브는 컴파일러로 부터 특별하게 처리된다. 그들의 컴파일러 기능이 불려지기
 전에, 그 디렉티브의 엘리멘트가 포함된 본문은 엘리멘트와 trnasclusion function을 경유하는
 기능을 제공하는 것으로 부터 제거된다.
 
 Before compilation:
 <div transclude-directive>
 	Some transcluded content
 </div>
 
 After transclusion 추출 이후:
 <div transclude-directive></div>
 
 After compilation:
 <div transclude-directive>
 	Som Template
 	<span ng-transclude>Some transcluded content</span>
 </div>
 
 만일 'element' transclution이 사용되는 디렉티브이면, 그 compiler는 DOM과 주석노드와
 함께 directive의 전체요소가 제거된다. 그 컴파일러는 그러면서 디렉티브의 템플릿을 주석 노드
 포함하여 형제로써 추가한다.
 
 Before compilation
 <div element-transclude>
 	Some Content
 </div>
 
 After transclusion 추출
 <!-- elementTransclude -->
 
 After compilation
 <!--elementTransclude -->
 <div element-transclude>
 	Some Template
 	<span ng-transclude>Some transcluded content</span>
 </div>

 디렉티브틔 테스트를 작성시에 element transclusion을 사용할때, 이것에 대해 아는 것은
 중요하다. 만일 DOM 일부의 root element에 디렉티브가 존재하고, 당신이 $compile로
 실행하면, 그 DOM node는 linking function으로부터 리턴된다. 그리고 comment node는
 template과 transcluded 본문에 적근이 가능하여 잃어 버릴 수도 있습니다. 
 
 var node = $compile('<div><div element-transclude></div></div>')($rootScope);
 var contents = node.contents();
 expect(contents[0].nodeType).toEqual(node.COMMENT_NODE);
 expect(contents[1].nodeType).toEqual(node.ELEMENT_NODE);
 
 외부 템플릿과 디렉티브 테스트
 만일 temptateUrl을 사용한다면 karma-ng-html2js-preprocessor사용을 고려하세요
 (https://github.com/karma-runner/karma-ng-html2js-preprocessor)
 HTML tempates와 거기게 HTTP넘어서 로딩하는 것을 피할 수 있습니다. 반면에 당신은
 아마 테스트 폴더를 계층구조를 어플리케이션과 다르게 가져가야 합니다.
 
- Promises 테스트
 promises를 테스트 할때는 digest cycle의 연결된 promises의 해결 방법에 대하여 아는
 것은 중요합니다. 이것은 promises의 then, catch, finally에 대해 콜백함수는 오직
 digest가 동작한 후에 불려진다는 것을 의미합니다. 테스트에서 당신을 스코프의 $applay 
 function이 블려져서 trigger 된다. 만일 단신이 너의 테스트에 scope를 가지고 있지 않으면, 
 너는 $rootScope와 $applay를 그것에 불러서 inject 할 수 있다. 또한 $q 서비스 문서의
 프로미스로 테스트 의 예가 된다.
 
 Using beforeAll()
 : Jasmine의 beforeAll()과 mocha's의 before()는 test설정이 분배되어 유용하게 되면 
 낚아 챈다. 테스트의 runtime을 줄이거나 또는 테스트 케이스의 많은 초점을 쉽게 만든다.
 기본적으로 ngMock은 inject를 테스트 케이스당 하나를 생성한다. 각각의 영향을 받지 않는 테
 스트라면 확실하다. 그러만 망리 beforsAll()를 사요하기 원한다면, ngMock은 어떤 test cases
 를 동작하기 전에 injector를 생성해야한다. 그리고 describe에게 모든 case를 injector
 롤 분배해야한다. module.sharedInjector()가 오게되면, 이것은 describe 범위안에서 
 불려지고, single injector는 모든 hooks와 테스트 케이스기 동작하는 블락 사이에서 분배
 된다. 
  아래의 예시를 보면 우리는 테스트 서비스를 오랜시간 이것의 답이 생성되도록 한다. assertions의
  모든 것을 피하고, 우리는 single test case를 작성하는 것을 원하기 때문에, module.sharedInjector()
  그리고 Jasmine's beforeAll()은 오직한번 서비스에서 기동된다. 이 테스트 케이스는 설정값이
  서비스 인스턴스에서 추가되는 것에 대하여 모든 assertions를 생성한다.
  
  describe("Deep Thought", function(){
  	module.sharedInjector();
  	beforeAll(module("UltimateQuestion"));
  	beforeAll(inject(function(DeepThought){
  		expect(DeepThought.answer).toBeUndefinded();
  		DeepThought.generateAnswer();
  	}));
  	
  	it("has calculated the answer correctly", inject(function(DeepThought){
  		//Because of sharedInjector, we have access to the instance of  the DeepThought service
  		// that wa proviede to the beforeAll() hook. Therefore we can test the generated answer
  		expect(DeepThought.answer).toBe(42);
  	}));
  	
  	it("has calculated the answer within the expected time", inject(function(DeepThought)
	{
		expect(DeepThought.runTimeMillennia).toBeLessThan(8000);
	}));
 	
 	it("has double checked the answer", inject(function(DeepThought){
 		expect(DeepThought.absoutelySereItIsTheRightAnser).toBe(true);
 	}));
 });

 

 --------------------------
 
 seed project : https://github.com/angular/angular-seed
 참고 URL : http://www.bradoncode.com/blog/2015/05/12/angularjs-testing-getting-started/
